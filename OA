# Name: Samuel Kim
# OSU Email: kims6@oregonstate.edu
# Course: CS261 - Data Structures
# Assignment: 6
# Due Date: 11MAR2022
# Description: Hash Map Open Addressing


from a6_include import *


class HashEntry:

    def __init__(self, key: str, value: object):
        """
        Initializes an entry for use in a hash map
        DO NOT CHANGE THIS METHOD IN ANY WAY
        """
        self.key = key
        self.value = value
        self.is_tombstone = False

    def __str__(self):
        """
        Overrides object's string method
        Return content of hash map t in human-readable form
        DO NOT CHANGE THIS METHOD IN ANY WAY
        """
        return f"K: {self.key} V: {self.value} TS: {self.is_tombstone}"


def hash_function_1(key: str) -> int:
    """
    Sample Hash function #1 to be used with HashMap implementation
    DO NOT CHANGE THIS FUNCTION IN ANY WAY
    """
    hash = 0
    for letter in key:
        hash += ord(letter)
    return hash


def hash_function_2(key: str) -> int:
    """
    Sample Hash function #2 to be used with HashMap implementation
    DO NOT CHANGE THIS FUNCTION IN ANY WAY
    """
    hash, index = 0, 0
    index = 0
    for letter in key:
        hash += (index + 1) * ord(letter)
        index += 1
    return hash


class HashMap:
    def __init__(self, capacity: int, function) -> None:
        """
        Initialize new HashMap that uses Quadratic Probing for collision resolution
        DO NOT CHANGE THIS METHOD IN ANY WAY
        """
        self.buckets = DynamicArray()

        for _ in range(capacity):
            self.buckets.append(None)

        self.capacity = capacity
        self.hash_function = function
        self.size = 0

    def __str__(self) -> str:
        """
        Overrides object's string method
        Return content of hash map in human-readable form
        DO NOT CHANGE THIS METHOD IN ANY WAY
        """
        out = ''
        for i in range(self.buckets.length()):
            out += str(i) + ': ' + str(self.buckets[i]) + '\n'
        return out

    def func_output(self, key):
        """
        Returns index place hash function assigns
        """
        hash = self.hash_function(key)
        index = hash % self.capacity
        return index

    def clear(self) -> None:
        """
        Clears contents of hash map.
        """
        for i in range(self.capacity):
            if self.buckets.get_at_index(i) is not None:
                self.buckets.set_at_index(i, None)
                self.size -= 1

    def get(self, key: str) -> object:
        """
        Returns value associated with the input key, return None if key is not in hash map
        """
        index = self.func_output(key)

        # Hash map is empty
        if self.size == 0:
            return None

        # Key is not in hash map
        if not self.contains_key(key):
            return None

        # Key is found in hash map
        for i in range(self.size):
            sus_index = (index + i**2) % self.capacity
            if self.buckets.get_at_index(sus_index).key == key:
                return self.buckets.get_at_index(sus_index).value


    def put(self, key: str, value: object) -> None:
        """
        Updates key/value pair in the hash map.  Adds pair if not in the hash/map
        """
        # If load factor is >= 0.5
        if self.table_load() >= 0.5:
            self.resize_table(self.capacity * 2)

        index = self.func_output(key)

        # If key already in hash map
        if self.contains_key(key):
            for i in range(self.size):
                sus_index = (index + i**2) % self.capacity
                if self.buckets.get_at_index(sus_index).key == key:
                    self.buckets.set_at_index(sus_index, HashEntry(key, value))
                    break

        # If key is not in hash map
        else:
            if self.buckets.get_at_index(index) is None:
                self.buckets.set_at_index(index, HashEntry(key, value))
                self.size += 1

            else:
                for i in range(self.size):
                    sus_index = (index + i**2) % self.capacity
                    # If index is empty or there's a tombstone
                    if self.buckets.get_at_index(sus_index) is None or self.buckets.get_at_index(sus_index).is_tombstone:
                        self.buckets.set_at_index(sus_index, HashEntry(key, value))
                        self.size += 1
                        break

    def remove(self, key: str) -> None:
        """
        Removes input key and its value if in hash map, does nothing otherwise
        """

        index = self.func_output(key)

        # Key is not in hash map
        if not self.contains_key(key):
            return

        # Key is in hash map
        else:
            if self.buckets.get_at_index(index).key == key:
                self.buckets.get_at_index(index).key = "key"
                self.buckets.get_at_index(index).value = "value"
                self.buckets.get_at_index(index).is_tombstone = True
                self.size -= 1

            else:
                for i in range(self.size):
                    sus_index = (index + i**2) % self.capacity
                    if self.buckets.get_at_index(sus_index) is None:
                        continue
                    if self.buckets.get_at_index(sus_index).key == key:
                        self.buckets.get_at_index(sus_index).key = "key"
                        self.buckets.get_at_index(sus_index).value = "value"
                        self.buckets.get_at_index(sus_index).is_tombstone = True
                        self.size -= 1

    def contains_key(self, key: str) -> bool:
        """
        Returns true if input key is in hash map and false if not
        """
        index = self.func_output(key)

        # Hash map is empty
        if self.size == 0:
            return False

        for i in range(self.size):
            sus_index = (index + i**2) % self.capacity
            if not self.buckets.get_at_index(sus_index):
                return False
            if self.buckets.get_at_index(sus_index).key == key:
                return True
        return False

    def empty_buckets(self) -> int:
        """
        Returns number of empty buckets
        """
        output = 0

        for i in range(self.capacity):
            if self.buckets.get_at_index(i) is None:
                output += 1

        return output

    def table_load(self) -> float:
        """
        Returns hash table load factor
        """
        load_factor = float(self.size / self.capacity)
        return load_factor

    def resize_table(self, new_capacity: int) -> None:
        """
        Resizes hash to double original capacity and rehashess key/value placement
        """
        new_da = HashMap(new_capacity, self.hash_function)

        if new_capacity < 1 or new_capacity < self.size:
            return

        # Add old key/value pairs into new da
        for num in range(self.capacity):
            if self.buckets.get_at_index(num) is None:
                continue
            else:
                new_da.put(self.buckets.get_at_index(num).key, self.buckets.get_at_index(num).value)

        if self.buckets.get_at_index(self.capacity + 1):
            if self.buckets.get_at_index(self.capacity + 1) is not None:
                new_da.put(self.buckets.get_at_index(self.capacity + 1).key, self.buckets.get_at_index(self.capacity + 1).value)

        self.buckets = new_da.buckets
        self.capacity = new_da.capacity
        self.size = new_da.size

    def get_keys(self) -> DynamicArray:
        """
        Returns a DynamicArray containing all the keys stored in the hash map
        """
        output = DynamicArray()

        for i in range(self.capacity):
            if self.buckets.get_at_index(i)is not None:
                if not self.buckets.get_at_index(i).is_tombstone:
                    output.append(self.buckets.get_at_index(i).key)

        return output



if __name__ == "__main__":

    print("\nPDF - empty_buckets example 1")
    print("-----------------------------")
    m = HashMap(100, hash_function_1)
    print(m.empty_buckets(), m.size, m.capacity)
    m.put('key1', 10)
    print(m.empty_buckets(), m.size, m.capacity)
    m.put('key2', 20)
    print(m.empty_buckets(), m.size, m.capacity)
    m.put('key1', 30)
    print(m.empty_buckets(), m.size, m.capacity)
    m.put('key4', 40)
    print(m.empty_buckets(), m.size, m.capacity)

    print("\nPDF - empty_buckets example 2")
    print("-----------------------------")
    # this test assumes that put() has already been correctly implemented
    m = HashMap(50, hash_function_1)
    for i in range(150):
        m.put('key' + str(i), i * 100)
        if i % 30 == 0:
            print(m.empty_buckets(), m.size, m.capacity)

    print("\nPDF - table_load example 1")
    print("--------------------------")
    m = HashMap(100, hash_function_1)
    print(m.table_load())
    m.put('key1', 10)
    print(m.table_load())
    m.put('key2', 20)
    print(m.table_load())
    m.put('key1', 30)
    print(m.table_load())

    print("\nPDF - table_load example 2")
    print("--------------------------")
    m = HashMap(50, hash_function_1)
    for i in range(50):
        m.put('key' + str(i), i * 100)
        if i % 10 == 0:
            print(m.table_load(), m.size, m.capacity)

    print("\nPDF - clear example 1")
    print("---------------------")
    m = HashMap(100, hash_function_1)
    print(m.size, m.capacity)
    m.put('key1', 10)
    m.put('key2', 20)
    m.put('key1', 30)
    print(m.size, m.capacity)
    m.clear()
    print(m.size, m.capacity)

    print("\nPDF - clear example 2")
    print("---------------------")
    m = HashMap(50, hash_function_1)
    print(m.size, m.capacity)
    m.put('key1', 10)
    print(m.size, m.capacity)
    m.put('key2', 20)
    print(m.size, m.capacity)
    m.resize_table(100)
    print(m.size, m.capacity)
    m.clear()
    print(m.size, m.capacity)

    print("\nPDF - put example 1")
    print("-------------------")
    m = HashMap(50, hash_function_1)
    for i in range(150):
        m.put('str' + str(i), i * 100)
        if i % 25 == 24:
            print(m.empty_buckets(), m.table_load(), m.size, m.capacity)

    print("\nPDF - put example 2")
    print("-------------------")
    m = HashMap(40, hash_function_2)
    for i in range(50):
        m.put('str' + str(i // 3), i * 100)
        if i % 10 == 9:
            print(m.empty_buckets(), m.table_load(), m.size, m.capacity)

    print("\nPDF - contains_key example 1")
    print("----------------------------")
    m = HashMap(10, hash_function_1)
    print(m.contains_key('key1'))
    m.put('key1', 10)
    m.put('key2', 20)
    m.put('key3', 30)
    print(m.contains_key('key1'))
    print(m.contains_key('key4'))
    print(m.contains_key('key2'))
    print(m.contains_key('key3'))
    m.remove('key3')
    print(m.contains_key('key3'))

    print("\nPDF - contains_key example 2")
    print("----------------------------")
    m = HashMap(75, hash_function_2)
    keys = [i for i in range(1, 1000, 20)]
    for key in keys:
        m.put(str(key), key * 42)
    print(m.size, m.capacity)
    result = True
    for key in keys:
        # all inserted keys must be present
        result &= m.contains_key(str(key))
        # NOT inserted keys must be absent
        result &= not m.contains_key(str(key + 1))
    print(result)

    print("\nPDF - get example 1")
    print("-------------------")
    m = HashMap(30, hash_function_1)
    print(m.get('key'))
    m.put('key1', 10)
    print(m.get('key1'))

    print("\nPDF - get example 2")
    print("-------------------")
    m = HashMap(150, hash_function_2)
    for i in range(200, 300, 7):
        m.put(str(i), i * 10)
    print(m.size, m.capacity)
    for i in range(200, 300, 21):
        print(i, m.get(str(i)), m.get(str(i)) == i * 10)
        print(i + 1, m.get(str(i + 1)), m.get(str(i + 1)) == (i + 1) * 10)

    print("\nPDF - remove example 1")
    print("----------------------")
    m = HashMap(50, hash_function_1)
    print(m.get('key1'))
    m.put('key1', 10)
    print(m.get('key1'))
    m.remove('key1')
    print(m.get('key1'))
    m.remove('key4')

    print("\nPDF - resize example 1")
    print("----------------------")
    m = HashMap(20, hash_function_1)
    m.put('key1', 10)
    print(m.size, m.capacity, m.get('key1'), m.contains_key('key1'))
    m.resize_table(30)
    print(m.size, m.capacity, m.get('key1'), m.contains_key('key1'))

    print("\nPDF - resize example 2")
    print("----------------------")
    m = HashMap(75, hash_function_2)
    keys = [i for i in range(1, 1000, 13)]
    output_count = 0
    for key in keys:
        m.put(str(key), key * 42)
        print("size:", m.size, "cap:", m.capacity, "key:", key)
    print(m.size, m.capacity)

    for capacity in range(111, 1000, 117):
        m.resize_table(capacity)

        m.put('some key', 'some value')
        result = m.contains_key('some key')
        m.remove('some key')

        for key in keys:
            result &= m.contains_key(str(key))
            result &= not m.contains_key(str(key + 1))
        print(capacity, result, m.size, m.capacity, round(m.table_load(), 2))

    print("\nPDF - get_keys example 1")
    print("------------------------")
    m = HashMap(10, hash_function_2)
    for i in range(100, 200, 10):
        m.put(str(i), str(i * 10))
    print(m.get_keys())

    m.resize_table(1)
    print(m.get_keys())

    m.put('200', '2000')
    m.remove('100')
    m.resize_table(2)
    print(m.get_keys())
